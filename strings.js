// Самое простое - это иногда мы исправляем за пользователем его ввод данных и хотим, 
// чтобы наша строка начиналась с большой буквы, независимо от того, что ввел пользователь.
// Необходимо реализовать такую функцию.

function capitalizeFirstLetter(str) {
    if (!str){
        return '';
    }
    return str[0].toUpperCase() + str.slice(1);
}
  
// Часто в интерфейсах программ мы видим какую-то длинную строку, которая не помещается и обрезана через троеточие.
// Давайте напишем аналогичный метод.
// На вход получаем длинную или не очень строку и размер ограничения (например, то что у нас влезает 40 символов).
// На выходе возвращает, по необходимости укороченную строку, в конце которой стоит троеточие.
// Усложняем задание тем, что строка не должна обрезаться посредине слова. Обрезаем строку по пробелу или по символу знака препинания (,.!?:;)/

function truncateWithEllipsis(str, maxLength) {
    if (str.length <= maxLength) {
      return str;
    }
  
    let truncatedStr = str.slice(0, maxLength - 3);
    const match = truncatedStr.match(/[\s.,!?:;)](?=[^.,!?:;)]*$)/);
    
    if (match) {
      truncatedStr = truncatedStr.slice(0, match.index);
    }

    return truncatedStr + '...';
}
  
// Небольшое практическое задание по работе с подстроками.
// Функция на вход получает 2 строки, а на выходе возвращает true/false в зависимости от того, является хотя бы одна из строк (не важно какая) подстрокой другой строки. Если да, то возвращается true. В противном случае - false.

function isSubstring(str1, str2) {
    return str1.includes(str2) || str2.includes(str1);
}